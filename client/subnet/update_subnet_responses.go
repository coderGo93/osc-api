// Code generated by go-swagger; DO NOT EDIT.

package subnet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// UpdateSubnetReader is a Reader for the UpdateSubnet structure.
type UpdateSubnetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSubnetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSubnetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSubnetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateSubnetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateSubnetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateSubnetOK creates a UpdateSubnetOK with default headers values
func NewUpdateSubnetOK() *UpdateSubnetOK {
	return &UpdateSubnetOK{}
}

/*UpdateSubnetOK handles this case with default header values.

The HTTP 200 response (OK).
*/
type UpdateSubnetOK struct {
}

func (o *UpdateSubnetOK) Error() string {
	return fmt.Sprintf("[POST /UpdateSubnet][%d] updateSubnetOK ", 200)
}

func (o *UpdateSubnetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSubnetBadRequest creates a UpdateSubnetBadRequest with default headers values
func NewUpdateSubnetBadRequest() *UpdateSubnetBadRequest {
	return &UpdateSubnetBadRequest{}
}

/*UpdateSubnetBadRequest handles this case with default header values.

The HTTP 400 response (Bad Request).
*/
type UpdateSubnetBadRequest struct {
}

func (o *UpdateSubnetBadRequest) Error() string {
	return fmt.Sprintf("[POST /UpdateSubnet][%d] updateSubnetBadRequest ", 400)
}

func (o *UpdateSubnetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSubnetUnauthorized creates a UpdateSubnetUnauthorized with default headers values
func NewUpdateSubnetUnauthorized() *UpdateSubnetUnauthorized {
	return &UpdateSubnetUnauthorized{}
}

/*UpdateSubnetUnauthorized handles this case with default header values.

The HTTP 401 response (Unauthorized).
*/
type UpdateSubnetUnauthorized struct {
}

func (o *UpdateSubnetUnauthorized) Error() string {
	return fmt.Sprintf("[POST /UpdateSubnet][%d] updateSubnetUnauthorized ", 401)
}

func (o *UpdateSubnetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSubnetInternalServerError creates a UpdateSubnetInternalServerError with default headers values
func NewUpdateSubnetInternalServerError() *UpdateSubnetInternalServerError {
	return &UpdateSubnetInternalServerError{}
}

/*UpdateSubnetInternalServerError handles this case with default header values.

The HTTP 500 response (Internal Server Error).
*/
type UpdateSubnetInternalServerError struct {
}

func (o *UpdateSubnetInternalServerError) Error() string {
	return fmt.Sprintf("[POST /UpdateSubnet][%d] updateSubnetInternalServerError ", 500)
}

func (o *UpdateSubnetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
