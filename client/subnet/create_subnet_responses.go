// Code generated by go-swagger; DO NOT EDIT.

package subnet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// CreateSubnetReader is a Reader for the CreateSubnet structure.
type CreateSubnetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSubnetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateSubnetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateSubnetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateSubnetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateSubnetConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateSubnetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateSubnetOK creates a CreateSubnetOK with default headers values
func NewCreateSubnetOK() *CreateSubnetOK {
	return &CreateSubnetOK{}
}

/*CreateSubnetOK handles this case with default header values.

The HTTP 200 response (OK).
*/
type CreateSubnetOK struct {
}

func (o *CreateSubnetOK) Error() string {
	return fmt.Sprintf("[POST /CreateSubnet][%d] createSubnetOK ", 200)
}

func (o *CreateSubnetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubnetBadRequest creates a CreateSubnetBadRequest with default headers values
func NewCreateSubnetBadRequest() *CreateSubnetBadRequest {
	return &CreateSubnetBadRequest{}
}

/*CreateSubnetBadRequest handles this case with default header values.

The HTTP 400 response (Bad Request).
*/
type CreateSubnetBadRequest struct {
}

func (o *CreateSubnetBadRequest) Error() string {
	return fmt.Sprintf("[POST /CreateSubnet][%d] createSubnetBadRequest ", 400)
}

func (o *CreateSubnetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubnetUnauthorized creates a CreateSubnetUnauthorized with default headers values
func NewCreateSubnetUnauthorized() *CreateSubnetUnauthorized {
	return &CreateSubnetUnauthorized{}
}

/*CreateSubnetUnauthorized handles this case with default header values.

The HTTP 401 response (Unauthorized).
*/
type CreateSubnetUnauthorized struct {
}

func (o *CreateSubnetUnauthorized) Error() string {
	return fmt.Sprintf("[POST /CreateSubnet][%d] createSubnetUnauthorized ", 401)
}

func (o *CreateSubnetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubnetConflict creates a CreateSubnetConflict with default headers values
func NewCreateSubnetConflict() *CreateSubnetConflict {
	return &CreateSubnetConflict{}
}

/*CreateSubnetConflict handles this case with default header values.

The HTTP 409 response (Conflict).
*/
type CreateSubnetConflict struct {
}

func (o *CreateSubnetConflict) Error() string {
	return fmt.Sprintf("[POST /CreateSubnet][%d] createSubnetConflict ", 409)
}

func (o *CreateSubnetConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubnetInternalServerError creates a CreateSubnetInternalServerError with default headers values
func NewCreateSubnetInternalServerError() *CreateSubnetInternalServerError {
	return &CreateSubnetInternalServerError{}
}

/*CreateSubnetInternalServerError handles this case with default header values.

The HTTP 500 response (Internal Server Error).
*/
type CreateSubnetInternalServerError struct {
}

func (o *CreateSubnetInternalServerError) Error() string {
	return fmt.Sprintf("[POST /CreateSubnet][%d] createSubnetInternalServerError ", 500)
}

func (o *CreateSubnetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
