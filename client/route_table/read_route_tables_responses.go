// Code generated by go-swagger; DO NOT EDIT.

package route_table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ReadRouteTablesReader is a Reader for the ReadRouteTables structure.
type ReadRouteTablesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadRouteTablesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadRouteTablesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadRouteTablesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadRouteTablesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadRouteTablesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadRouteTablesOK creates a ReadRouteTablesOK with default headers values
func NewReadRouteTablesOK() *ReadRouteTablesOK {
	return &ReadRouteTablesOK{}
}

/*ReadRouteTablesOK handles this case with default header values.

The HTTP 200 response (OK).
*/
type ReadRouteTablesOK struct {
}

func (o *ReadRouteTablesOK) Error() string {
	return fmt.Sprintf("[POST /ReadRouteTables][%d] readRouteTablesOK ", 200)
}

func (o *ReadRouteTablesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadRouteTablesBadRequest creates a ReadRouteTablesBadRequest with default headers values
func NewReadRouteTablesBadRequest() *ReadRouteTablesBadRequest {
	return &ReadRouteTablesBadRequest{}
}

/*ReadRouteTablesBadRequest handles this case with default header values.

The HTTP 400 response (Bad Request).
*/
type ReadRouteTablesBadRequest struct {
}

func (o *ReadRouteTablesBadRequest) Error() string {
	return fmt.Sprintf("[POST /ReadRouteTables][%d] readRouteTablesBadRequest ", 400)
}

func (o *ReadRouteTablesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadRouteTablesUnauthorized creates a ReadRouteTablesUnauthorized with default headers values
func NewReadRouteTablesUnauthorized() *ReadRouteTablesUnauthorized {
	return &ReadRouteTablesUnauthorized{}
}

/*ReadRouteTablesUnauthorized handles this case with default header values.

The HTTP 401 response (Unauthorized).
*/
type ReadRouteTablesUnauthorized struct {
}

func (o *ReadRouteTablesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ReadRouteTables][%d] readRouteTablesUnauthorized ", 401)
}

func (o *ReadRouteTablesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadRouteTablesInternalServerError creates a ReadRouteTablesInternalServerError with default headers values
func NewReadRouteTablesInternalServerError() *ReadRouteTablesInternalServerError {
	return &ReadRouteTablesInternalServerError{}
}

/*ReadRouteTablesInternalServerError handles this case with default header values.

The HTTP 500 response (Internal Server Error).
*/
type ReadRouteTablesInternalServerError struct {
}

func (o *ReadRouteTablesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /ReadRouteTables][%d] readRouteTablesInternalServerError ", 500)
}

func (o *ReadRouteTablesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
