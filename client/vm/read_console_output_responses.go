// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ReadConsoleOutputReader is a Reader for the ReadConsoleOutput structure.
type ReadConsoleOutputReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadConsoleOutputReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadConsoleOutputOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadConsoleOutputBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadConsoleOutputUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadConsoleOutputInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadConsoleOutputOK creates a ReadConsoleOutputOK with default headers values
func NewReadConsoleOutputOK() *ReadConsoleOutputOK {
	return &ReadConsoleOutputOK{}
}

/*ReadConsoleOutputOK handles this case with default header values.

The HTTP 200 response (OK).
*/
type ReadConsoleOutputOK struct {
}

func (o *ReadConsoleOutputOK) Error() string {
	return fmt.Sprintf("[POST /ReadConsoleOutput][%d] readConsoleOutputOK ", 200)
}

func (o *ReadConsoleOutputOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadConsoleOutputBadRequest creates a ReadConsoleOutputBadRequest with default headers values
func NewReadConsoleOutputBadRequest() *ReadConsoleOutputBadRequest {
	return &ReadConsoleOutputBadRequest{}
}

/*ReadConsoleOutputBadRequest handles this case with default header values.

The HTTP 400 response (Bad Request).
*/
type ReadConsoleOutputBadRequest struct {
}

func (o *ReadConsoleOutputBadRequest) Error() string {
	return fmt.Sprintf("[POST /ReadConsoleOutput][%d] readConsoleOutputBadRequest ", 400)
}

func (o *ReadConsoleOutputBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadConsoleOutputUnauthorized creates a ReadConsoleOutputUnauthorized with default headers values
func NewReadConsoleOutputUnauthorized() *ReadConsoleOutputUnauthorized {
	return &ReadConsoleOutputUnauthorized{}
}

/*ReadConsoleOutputUnauthorized handles this case with default header values.

The HTTP 401 response (Unauthorized).
*/
type ReadConsoleOutputUnauthorized struct {
}

func (o *ReadConsoleOutputUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ReadConsoleOutput][%d] readConsoleOutputUnauthorized ", 401)
}

func (o *ReadConsoleOutputUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadConsoleOutputInternalServerError creates a ReadConsoleOutputInternalServerError with default headers values
func NewReadConsoleOutputInternalServerError() *ReadConsoleOutputInternalServerError {
	return &ReadConsoleOutputInternalServerError{}
}

/*ReadConsoleOutputInternalServerError handles this case with default header values.

The HTTP 500 response (Internal Server Error).
*/
type ReadConsoleOutputInternalServerError struct {
}

func (o *ReadConsoleOutputInternalServerError) Error() string {
	return fmt.Sprintf("[POST /ReadConsoleOutput][%d] readConsoleOutputInternalServerError ", 500)
}

func (o *ReadConsoleOutputInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
