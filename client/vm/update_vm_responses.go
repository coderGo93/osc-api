// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// UpdateVMReader is a Reader for the UpdateVM structure.
type UpdateVMReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVMReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVMOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVMBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateVMUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateVMInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateVMOK creates a UpdateVMOK with default headers values
func NewUpdateVMOK() *UpdateVMOK {
	return &UpdateVMOK{}
}

/*UpdateVMOK handles this case with default header values.

The HTTP 200 response (OK).
*/
type UpdateVMOK struct {
}

func (o *UpdateVMOK) Error() string {
	return fmt.Sprintf("[POST /UpdateVm][%d] updateVmOK ", 200)
}

func (o *UpdateVMOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVMBadRequest creates a UpdateVMBadRequest with default headers values
func NewUpdateVMBadRequest() *UpdateVMBadRequest {
	return &UpdateVMBadRequest{}
}

/*UpdateVMBadRequest handles this case with default header values.

The HTTP 400 response (Bad Request).
*/
type UpdateVMBadRequest struct {
}

func (o *UpdateVMBadRequest) Error() string {
	return fmt.Sprintf("[POST /UpdateVm][%d] updateVmBadRequest ", 400)
}

func (o *UpdateVMBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVMUnauthorized creates a UpdateVMUnauthorized with default headers values
func NewUpdateVMUnauthorized() *UpdateVMUnauthorized {
	return &UpdateVMUnauthorized{}
}

/*UpdateVMUnauthorized handles this case with default header values.

The HTTP 401 response (Unauthorized).
*/
type UpdateVMUnauthorized struct {
}

func (o *UpdateVMUnauthorized) Error() string {
	return fmt.Sprintf("[POST /UpdateVm][%d] updateVmUnauthorized ", 401)
}

func (o *UpdateVMUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVMInternalServerError creates a UpdateVMInternalServerError with default headers values
func NewUpdateVMInternalServerError() *UpdateVMInternalServerError {
	return &UpdateVMInternalServerError{}
}

/*UpdateVMInternalServerError handles this case with default header values.

The HTTP 500 response (Internal Server Error).
*/
type UpdateVMInternalServerError struct {
}

func (o *UpdateVMInternalServerError) Error() string {
	return fmt.Sprintf("[POST /UpdateVm][%d] updateVmInternalServerError ", 500)
}

func (o *UpdateVMInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
