// Code generated by go-swagger; DO NOT EDIT.

package virtual_gateway

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new virtual gateway API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual gateway API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateVirtualGateway create virtual gateway API
*/
func (a *Client) CreateVirtualGateway(params *CreateVirtualGatewayParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVirtualGatewayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVirtualGatewayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateVirtualGateway",
		Method:             "POST",
		PathPattern:        "/CreateVirtualGateway",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVirtualGatewayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVirtualGatewayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVirtualGateway: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteVirtualGateway delete virtual gateway API
*/
func (a *Client) DeleteVirtualGateway(params *DeleteVirtualGatewayParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVirtualGatewayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVirtualGatewayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVirtualGateway",
		Method:             "POST",
		PathPattern:        "/DeleteVirtualGateway",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVirtualGatewayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVirtualGatewayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVirtualGateway: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkVirtualGateway link virtual gateway API
*/
func (a *Client) LinkVirtualGateway(params *LinkVirtualGatewayParams, authInfo runtime.ClientAuthInfoWriter) (*LinkVirtualGatewayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkVirtualGatewayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LinkVirtualGateway",
		Method:             "POST",
		PathPattern:        "/LinkVirtualGateway",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkVirtualGatewayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkVirtualGatewayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LinkVirtualGateway: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadVirtualGateways read virtual gateways API
*/
func (a *Client) ReadVirtualGateways(params *ReadVirtualGatewaysParams, authInfo runtime.ClientAuthInfoWriter) (*ReadVirtualGatewaysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadVirtualGatewaysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadVirtualGateways",
		Method:             "POST",
		PathPattern:        "/ReadVirtualGateways",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadVirtualGatewaysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadVirtualGatewaysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadVirtualGateways: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnlinkVirtualGateway unlink virtual gateway API
*/
func (a *Client) UnlinkVirtualGateway(params *UnlinkVirtualGatewayParams, authInfo runtime.ClientAuthInfoWriter) (*UnlinkVirtualGatewayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlinkVirtualGatewayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UnlinkVirtualGateway",
		Method:             "POST",
		PathPattern:        "/UnlinkVirtualGateway",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnlinkVirtualGatewayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnlinkVirtualGatewayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UnlinkVirtualGateway: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRoutePropagation update route propagation API
*/
func (a *Client) UpdateRoutePropagation(params *UpdateRoutePropagationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRoutePropagationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRoutePropagationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateRoutePropagation",
		Method:             "POST",
		PathPattern:        "/UpdateRoutePropagation",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRoutePropagationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRoutePropagationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRoutePropagation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
