// Code generated by go-swagger; DO NOT EDIT.

package route

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// UpdateRouteReader is a Reader for the UpdateRoute structure.
type UpdateRouteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRouteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRouteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRouteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRouteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRouteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateRouteOK creates a UpdateRouteOK with default headers values
func NewUpdateRouteOK() *UpdateRouteOK {
	return &UpdateRouteOK{}
}

/*UpdateRouteOK handles this case with default header values.

The HTTP 200 response (OK).
*/
type UpdateRouteOK struct {
}

func (o *UpdateRouteOK) Error() string {
	return fmt.Sprintf("[POST /UpdateRoute][%d] updateRouteOK ", 200)
}

func (o *UpdateRouteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRouteBadRequest creates a UpdateRouteBadRequest with default headers values
func NewUpdateRouteBadRequest() *UpdateRouteBadRequest {
	return &UpdateRouteBadRequest{}
}

/*UpdateRouteBadRequest handles this case with default header values.

The HTTP 400 response (Bad Request).
*/
type UpdateRouteBadRequest struct {
}

func (o *UpdateRouteBadRequest) Error() string {
	return fmt.Sprintf("[POST /UpdateRoute][%d] updateRouteBadRequest ", 400)
}

func (o *UpdateRouteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRouteUnauthorized creates a UpdateRouteUnauthorized with default headers values
func NewUpdateRouteUnauthorized() *UpdateRouteUnauthorized {
	return &UpdateRouteUnauthorized{}
}

/*UpdateRouteUnauthorized handles this case with default header values.

The HTTP 401 response (Unauthorized).
*/
type UpdateRouteUnauthorized struct {
}

func (o *UpdateRouteUnauthorized) Error() string {
	return fmt.Sprintf("[POST /UpdateRoute][%d] updateRouteUnauthorized ", 401)
}

func (o *UpdateRouteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRouteInternalServerError creates a UpdateRouteInternalServerError with default headers values
func NewUpdateRouteInternalServerError() *UpdateRouteInternalServerError {
	return &UpdateRouteInternalServerError{}
}

/*UpdateRouteInternalServerError handles this case with default header values.

The HTTP 500 response (Internal Server Error).
*/
type UpdateRouteInternalServerError struct {
}

func (o *UpdateRouteInternalServerError) Error() string {
	return fmt.Sprintf("[POST /UpdateRoute][%d] updateRouteInternalServerError ", 500)
}

func (o *UpdateRouteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
