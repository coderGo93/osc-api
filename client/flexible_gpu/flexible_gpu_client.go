// Code generated by go-swagger; DO NOT EDIT.

package flexible_gpu

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new flexible gpu API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for flexible gpu API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateFlexibleGpu create flexible gpu API
*/
func (a *Client) CreateFlexibleGpu(params *CreateFlexibleGpuParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFlexibleGpuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFlexibleGpuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateFlexibleGpu",
		Method:             "POST",
		PathPattern:        "/CreateFlexibleGpu",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFlexibleGpuReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFlexibleGpuOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateFlexibleGpu: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteFlexibleGpu delete flexible gpu API
*/
func (a *Client) DeleteFlexibleGpu(params *DeleteFlexibleGpuParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFlexibleGpuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFlexibleGpuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFlexibleGpu",
		Method:             "POST",
		PathPattern:        "/DeleteFlexibleGpu",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFlexibleGpuReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFlexibleGpuOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteFlexibleGpu: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkFlexibleGpu link flexible gpu API
*/
func (a *Client) LinkFlexibleGpu(params *LinkFlexibleGpuParams, authInfo runtime.ClientAuthInfoWriter) (*LinkFlexibleGpuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkFlexibleGpuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LinkFlexibleGpu",
		Method:             "POST",
		PathPattern:        "/LinkFlexibleGpu",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkFlexibleGpuReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkFlexibleGpuOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LinkFlexibleGpu: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadFlexibleGpuCatalog read flexible gpu catalog API
*/
func (a *Client) ReadFlexibleGpuCatalog(params *ReadFlexibleGpuCatalogParams) (*ReadFlexibleGpuCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadFlexibleGpuCatalogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadFlexibleGpuCatalog",
		Method:             "POST",
		PathPattern:        "/ReadFlexibleGpuCatalog",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadFlexibleGpuCatalogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadFlexibleGpuCatalogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadFlexibleGpuCatalog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadFlexibleGpus read flexible gpus API
*/
func (a *Client) ReadFlexibleGpus(params *ReadFlexibleGpusParams, authInfo runtime.ClientAuthInfoWriter) (*ReadFlexibleGpusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadFlexibleGpusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadFlexibleGpus",
		Method:             "POST",
		PathPattern:        "/ReadFlexibleGpus",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadFlexibleGpusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadFlexibleGpusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadFlexibleGpus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnlinkFlexibleGpu unlink flexible gpu API
*/
func (a *Client) UnlinkFlexibleGpu(params *UnlinkFlexibleGpuParams, authInfo runtime.ClientAuthInfoWriter) (*UnlinkFlexibleGpuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlinkFlexibleGpuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UnlinkFlexibleGpu",
		Method:             "POST",
		PathPattern:        "/UnlinkFlexibleGpu",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnlinkFlexibleGpuReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnlinkFlexibleGpuOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UnlinkFlexibleGpu: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateFlexibleGpu update flexible gpu API
*/
func (a *Client) UpdateFlexibleGpu(params *UpdateFlexibleGpuParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFlexibleGpuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFlexibleGpuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateFlexibleGpu",
		Method:             "POST",
		PathPattern:        "/UpdateFlexibleGpu",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFlexibleGpuReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFlexibleGpuOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateFlexibleGpu: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
