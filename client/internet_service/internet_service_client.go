// Code generated by go-swagger; DO NOT EDIT.

package internet_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new internet service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for internet service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateInternetService create internet service API
*/
func (a *Client) CreateInternetService(params *CreateInternetServiceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateInternetServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInternetServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateInternetService",
		Method:             "POST",
		PathPattern:        "/CreateInternetService",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateInternetServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInternetServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateInternetService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteInternetService delete internet service API
*/
func (a *Client) DeleteInternetService(params *DeleteInternetServiceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInternetServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInternetServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteInternetService",
		Method:             "POST",
		PathPattern:        "/DeleteInternetService",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteInternetServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInternetServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteInternetService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkInternetService link internet service API
*/
func (a *Client) LinkInternetService(params *LinkInternetServiceParams, authInfo runtime.ClientAuthInfoWriter) (*LinkInternetServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkInternetServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LinkInternetService",
		Method:             "POST",
		PathPattern:        "/LinkInternetService",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkInternetServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkInternetServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LinkInternetService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadInternetServices read internet services API
*/
func (a *Client) ReadInternetServices(params *ReadInternetServicesParams, authInfo runtime.ClientAuthInfoWriter) (*ReadInternetServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadInternetServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadInternetServices",
		Method:             "POST",
		PathPattern:        "/ReadInternetServices",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadInternetServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadInternetServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadInternetServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnlinkInternetService unlink internet service API
*/
func (a *Client) UnlinkInternetService(params *UnlinkInternetServiceParams, authInfo runtime.ClientAuthInfoWriter) (*UnlinkInternetServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlinkInternetServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UnlinkInternetService",
		Method:             "POST",
		PathPattern:        "/UnlinkInternetService",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnlinkInternetServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnlinkInternetServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UnlinkInternetService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
