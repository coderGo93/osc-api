// Code generated by go-swagger; DO NOT EDIT.

package net_peering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// CreateNetPeeringReader is a Reader for the CreateNetPeering structure.
type CreateNetPeeringReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNetPeeringReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateNetPeeringOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateNetPeeringBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateNetPeeringUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateNetPeeringInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateNetPeeringOK creates a CreateNetPeeringOK with default headers values
func NewCreateNetPeeringOK() *CreateNetPeeringOK {
	return &CreateNetPeeringOK{}
}

/*CreateNetPeeringOK handles this case with default header values.

The HTTP 200 response (OK).
*/
type CreateNetPeeringOK struct {
}

func (o *CreateNetPeeringOK) Error() string {
	return fmt.Sprintf("[POST /CreateNetPeering][%d] createNetPeeringOK ", 200)
}

func (o *CreateNetPeeringOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateNetPeeringBadRequest creates a CreateNetPeeringBadRequest with default headers values
func NewCreateNetPeeringBadRequest() *CreateNetPeeringBadRequest {
	return &CreateNetPeeringBadRequest{}
}

/*CreateNetPeeringBadRequest handles this case with default header values.

The HTTP 400 response (Bad Request).
*/
type CreateNetPeeringBadRequest struct {
}

func (o *CreateNetPeeringBadRequest) Error() string {
	return fmt.Sprintf("[POST /CreateNetPeering][%d] createNetPeeringBadRequest ", 400)
}

func (o *CreateNetPeeringBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateNetPeeringUnauthorized creates a CreateNetPeeringUnauthorized with default headers values
func NewCreateNetPeeringUnauthorized() *CreateNetPeeringUnauthorized {
	return &CreateNetPeeringUnauthorized{}
}

/*CreateNetPeeringUnauthorized handles this case with default header values.

The HTTP 401 response (Unauthorized).
*/
type CreateNetPeeringUnauthorized struct {
}

func (o *CreateNetPeeringUnauthorized) Error() string {
	return fmt.Sprintf("[POST /CreateNetPeering][%d] createNetPeeringUnauthorized ", 401)
}

func (o *CreateNetPeeringUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateNetPeeringInternalServerError creates a CreateNetPeeringInternalServerError with default headers values
func NewCreateNetPeeringInternalServerError() *CreateNetPeeringInternalServerError {
	return &CreateNetPeeringInternalServerError{}
}

/*CreateNetPeeringInternalServerError handles this case with default header values.

The HTTP 500 response (Internal Server Error).
*/
type CreateNetPeeringInternalServerError struct {
}

func (o *CreateNetPeeringInternalServerError) Error() string {
	return fmt.Sprintf("[POST /CreateNetPeering][%d] createNetPeeringInternalServerError ", 500)
}

func (o *CreateNetPeeringInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
