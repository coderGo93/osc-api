// Code generated by go-swagger; DO NOT EDIT.

package net_peering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// RejectNetPeeringReader is a Reader for the RejectNetPeering structure.
type RejectNetPeeringReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RejectNetPeeringReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRejectNetPeeringOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRejectNetPeeringBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRejectNetPeeringUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewRejectNetPeeringConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRejectNetPeeringInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRejectNetPeeringOK creates a RejectNetPeeringOK with default headers values
func NewRejectNetPeeringOK() *RejectNetPeeringOK {
	return &RejectNetPeeringOK{}
}

/*RejectNetPeeringOK handles this case with default header values.

The HTTP 200 response (OK).
*/
type RejectNetPeeringOK struct {
}

func (o *RejectNetPeeringOK) Error() string {
	return fmt.Sprintf("[POST /RejectNetPeering][%d] rejectNetPeeringOK ", 200)
}

func (o *RejectNetPeeringOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRejectNetPeeringBadRequest creates a RejectNetPeeringBadRequest with default headers values
func NewRejectNetPeeringBadRequest() *RejectNetPeeringBadRequest {
	return &RejectNetPeeringBadRequest{}
}

/*RejectNetPeeringBadRequest handles this case with default header values.

The HTTP 400 response (Bad Request).
*/
type RejectNetPeeringBadRequest struct {
}

func (o *RejectNetPeeringBadRequest) Error() string {
	return fmt.Sprintf("[POST /RejectNetPeering][%d] rejectNetPeeringBadRequest ", 400)
}

func (o *RejectNetPeeringBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRejectNetPeeringUnauthorized creates a RejectNetPeeringUnauthorized with default headers values
func NewRejectNetPeeringUnauthorized() *RejectNetPeeringUnauthorized {
	return &RejectNetPeeringUnauthorized{}
}

/*RejectNetPeeringUnauthorized handles this case with default header values.

The HTTP 401 response (Unauthorized).
*/
type RejectNetPeeringUnauthorized struct {
}

func (o *RejectNetPeeringUnauthorized) Error() string {
	return fmt.Sprintf("[POST /RejectNetPeering][%d] rejectNetPeeringUnauthorized ", 401)
}

func (o *RejectNetPeeringUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRejectNetPeeringConflict creates a RejectNetPeeringConflict with default headers values
func NewRejectNetPeeringConflict() *RejectNetPeeringConflict {
	return &RejectNetPeeringConflict{}
}

/*RejectNetPeeringConflict handles this case with default header values.

The HTTP 409 response (Conflict).
*/
type RejectNetPeeringConflict struct {
}

func (o *RejectNetPeeringConflict) Error() string {
	return fmt.Sprintf("[POST /RejectNetPeering][%d] rejectNetPeeringConflict ", 409)
}

func (o *RejectNetPeeringConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRejectNetPeeringInternalServerError creates a RejectNetPeeringInternalServerError with default headers values
func NewRejectNetPeeringInternalServerError() *RejectNetPeeringInternalServerError {
	return &RejectNetPeeringInternalServerError{}
}

/*RejectNetPeeringInternalServerError handles this case with default header values.

The HTTP 500 response (Internal Server Error).
*/
type RejectNetPeeringInternalServerError struct {
}

func (o *RejectNetPeeringInternalServerError) Error() string {
	return fmt.Sprintf("[POST /RejectNetPeering][%d] rejectNetPeeringInternalServerError ", 500)
}

func (o *RejectNetPeeringInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
