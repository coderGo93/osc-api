// Code generated by go-swagger; DO NOT EDIT.

package net_peering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new net peering API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for net peering API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AcceptNetPeering accept net peering API
*/
func (a *Client) AcceptNetPeering(params *AcceptNetPeeringParams, authInfo runtime.ClientAuthInfoWriter) (*AcceptNetPeeringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptNetPeeringParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AcceptNetPeering",
		Method:             "POST",
		PathPattern:        "/AcceptNetPeering",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AcceptNetPeeringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptNetPeeringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AcceptNetPeering: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNetPeering create net peering API
*/
func (a *Client) CreateNetPeering(params *CreateNetPeeringParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetPeeringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetPeeringParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateNetPeering",
		Method:             "POST",
		PathPattern:        "/CreateNetPeering",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNetPeeringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetPeeringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateNetPeering: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteNetPeering delete net peering API
*/
func (a *Client) DeleteNetPeering(params *DeleteNetPeeringParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetPeeringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetPeeringParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteNetPeering",
		Method:             "POST",
		PathPattern:        "/DeleteNetPeering",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetPeeringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetPeeringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteNetPeering: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadNetPeerings read net peerings API
*/
func (a *Client) ReadNetPeerings(params *ReadNetPeeringsParams, authInfo runtime.ClientAuthInfoWriter) (*ReadNetPeeringsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNetPeeringsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadNetPeerings",
		Method:             "POST",
		PathPattern:        "/ReadNetPeerings",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadNetPeeringsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadNetPeeringsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadNetPeerings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RejectNetPeering reject net peering API
*/
func (a *Client) RejectNetPeering(params *RejectNetPeeringParams, authInfo runtime.ClientAuthInfoWriter) (*RejectNetPeeringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectNetPeeringParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RejectNetPeering",
		Method:             "POST",
		PathPattern:        "/RejectNetPeering",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RejectNetPeeringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectNetPeeringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RejectNetPeering: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
