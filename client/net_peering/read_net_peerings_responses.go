// Code generated by go-swagger; DO NOT EDIT.

package net_peering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ReadNetPeeringsReader is a Reader for the ReadNetPeerings structure.
type ReadNetPeeringsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadNetPeeringsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadNetPeeringsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadNetPeeringsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadNetPeeringsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadNetPeeringsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadNetPeeringsOK creates a ReadNetPeeringsOK with default headers values
func NewReadNetPeeringsOK() *ReadNetPeeringsOK {
	return &ReadNetPeeringsOK{}
}

/*ReadNetPeeringsOK handles this case with default header values.

The HTTP 200 response (OK).
*/
type ReadNetPeeringsOK struct {
}

func (o *ReadNetPeeringsOK) Error() string {
	return fmt.Sprintf("[POST /ReadNetPeerings][%d] readNetPeeringsOK ", 200)
}

func (o *ReadNetPeeringsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadNetPeeringsBadRequest creates a ReadNetPeeringsBadRequest with default headers values
func NewReadNetPeeringsBadRequest() *ReadNetPeeringsBadRequest {
	return &ReadNetPeeringsBadRequest{}
}

/*ReadNetPeeringsBadRequest handles this case with default header values.

The HTTP 400 response (Bad Request).
*/
type ReadNetPeeringsBadRequest struct {
}

func (o *ReadNetPeeringsBadRequest) Error() string {
	return fmt.Sprintf("[POST /ReadNetPeerings][%d] readNetPeeringsBadRequest ", 400)
}

func (o *ReadNetPeeringsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadNetPeeringsUnauthorized creates a ReadNetPeeringsUnauthorized with default headers values
func NewReadNetPeeringsUnauthorized() *ReadNetPeeringsUnauthorized {
	return &ReadNetPeeringsUnauthorized{}
}

/*ReadNetPeeringsUnauthorized handles this case with default header values.

The HTTP 401 response (Unauthorized).
*/
type ReadNetPeeringsUnauthorized struct {
}

func (o *ReadNetPeeringsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ReadNetPeerings][%d] readNetPeeringsUnauthorized ", 401)
}

func (o *ReadNetPeeringsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadNetPeeringsInternalServerError creates a ReadNetPeeringsInternalServerError with default headers values
func NewReadNetPeeringsInternalServerError() *ReadNetPeeringsInternalServerError {
	return &ReadNetPeeringsInternalServerError{}
}

/*ReadNetPeeringsInternalServerError handles this case with default header values.

The HTTP 500 response (Internal Server Error).
*/
type ReadNetPeeringsInternalServerError struct {
}

func (o *ReadNetPeeringsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /ReadNetPeerings][%d] readNetPeeringsInternalServerError ", 500)
}

func (o *ReadNetPeeringsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
