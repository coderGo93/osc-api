// Code generated by go-swagger; DO NOT EDIT.

package net_peering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// AcceptNetPeeringReader is a Reader for the AcceptNetPeering structure.
type AcceptNetPeeringReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AcceptNetPeeringReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAcceptNetPeeringOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAcceptNetPeeringBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAcceptNetPeeringUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAcceptNetPeeringConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAcceptNetPeeringInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAcceptNetPeeringOK creates a AcceptNetPeeringOK with default headers values
func NewAcceptNetPeeringOK() *AcceptNetPeeringOK {
	return &AcceptNetPeeringOK{}
}

/*AcceptNetPeeringOK handles this case with default header values.

The HTTP 200 response (OK).
*/
type AcceptNetPeeringOK struct {
}

func (o *AcceptNetPeeringOK) Error() string {
	return fmt.Sprintf("[POST /AcceptNetPeering][%d] acceptNetPeeringOK ", 200)
}

func (o *AcceptNetPeeringOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAcceptNetPeeringBadRequest creates a AcceptNetPeeringBadRequest with default headers values
func NewAcceptNetPeeringBadRequest() *AcceptNetPeeringBadRequest {
	return &AcceptNetPeeringBadRequest{}
}

/*AcceptNetPeeringBadRequest handles this case with default header values.

The HTTP 400 response (Bad Request).
*/
type AcceptNetPeeringBadRequest struct {
}

func (o *AcceptNetPeeringBadRequest) Error() string {
	return fmt.Sprintf("[POST /AcceptNetPeering][%d] acceptNetPeeringBadRequest ", 400)
}

func (o *AcceptNetPeeringBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAcceptNetPeeringUnauthorized creates a AcceptNetPeeringUnauthorized with default headers values
func NewAcceptNetPeeringUnauthorized() *AcceptNetPeeringUnauthorized {
	return &AcceptNetPeeringUnauthorized{}
}

/*AcceptNetPeeringUnauthorized handles this case with default header values.

The HTTP 401 response (Unauthorized).
*/
type AcceptNetPeeringUnauthorized struct {
}

func (o *AcceptNetPeeringUnauthorized) Error() string {
	return fmt.Sprintf("[POST /AcceptNetPeering][%d] acceptNetPeeringUnauthorized ", 401)
}

func (o *AcceptNetPeeringUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAcceptNetPeeringConflict creates a AcceptNetPeeringConflict with default headers values
func NewAcceptNetPeeringConflict() *AcceptNetPeeringConflict {
	return &AcceptNetPeeringConflict{}
}

/*AcceptNetPeeringConflict handles this case with default header values.

The HTTP 409 response (Conflict).
*/
type AcceptNetPeeringConflict struct {
}

func (o *AcceptNetPeeringConflict) Error() string {
	return fmt.Sprintf("[POST /AcceptNetPeering][%d] acceptNetPeeringConflict ", 409)
}

func (o *AcceptNetPeeringConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAcceptNetPeeringInternalServerError creates a AcceptNetPeeringInternalServerError with default headers values
func NewAcceptNetPeeringInternalServerError() *AcceptNetPeeringInternalServerError {
	return &AcceptNetPeeringInternalServerError{}
}

/*AcceptNetPeeringInternalServerError handles this case with default header values.

The HTTP 500 response (Internal Server Error).
*/
type AcceptNetPeeringInternalServerError struct {
}

func (o *AcceptNetPeeringInternalServerError) Error() string {
	return fmt.Sprintf("[POST /AcceptNetPeering][%d] acceptNetPeeringInternalServerError ", 500)
}

func (o *AcceptNetPeeringInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
