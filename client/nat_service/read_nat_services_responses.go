// Code generated by go-swagger; DO NOT EDIT.

package nat_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ReadNatServicesReader is a Reader for the ReadNatServices structure.
type ReadNatServicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadNatServicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadNatServicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadNatServicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadNatServicesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadNatServicesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadNatServicesOK creates a ReadNatServicesOK with default headers values
func NewReadNatServicesOK() *ReadNatServicesOK {
	return &ReadNatServicesOK{}
}

/*ReadNatServicesOK handles this case with default header values.

The HTTP 200 response (OK).
*/
type ReadNatServicesOK struct {
}

func (o *ReadNatServicesOK) Error() string {
	return fmt.Sprintf("[POST /ReadNatServices][%d] readNatServicesOK ", 200)
}

func (o *ReadNatServicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadNatServicesBadRequest creates a ReadNatServicesBadRequest with default headers values
func NewReadNatServicesBadRequest() *ReadNatServicesBadRequest {
	return &ReadNatServicesBadRequest{}
}

/*ReadNatServicesBadRequest handles this case with default header values.

The HTTP 400 response (Bad Request).
*/
type ReadNatServicesBadRequest struct {
}

func (o *ReadNatServicesBadRequest) Error() string {
	return fmt.Sprintf("[POST /ReadNatServices][%d] readNatServicesBadRequest ", 400)
}

func (o *ReadNatServicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadNatServicesUnauthorized creates a ReadNatServicesUnauthorized with default headers values
func NewReadNatServicesUnauthorized() *ReadNatServicesUnauthorized {
	return &ReadNatServicesUnauthorized{}
}

/*ReadNatServicesUnauthorized handles this case with default header values.

The HTTP 401 response (Unauthorized).
*/
type ReadNatServicesUnauthorized struct {
}

func (o *ReadNatServicesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ReadNatServices][%d] readNatServicesUnauthorized ", 401)
}

func (o *ReadNatServicesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadNatServicesInternalServerError creates a ReadNatServicesInternalServerError with default headers values
func NewReadNatServicesInternalServerError() *ReadNatServicesInternalServerError {
	return &ReadNatServicesInternalServerError{}
}

/*ReadNatServicesInternalServerError handles this case with default header values.

The HTTP 500 response (Internal Server Error).
*/
type ReadNatServicesInternalServerError struct {
}

func (o *ReadNatServicesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /ReadNatServices][%d] readNatServicesInternalServerError ", 500)
}

func (o *ReadNatServicesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
