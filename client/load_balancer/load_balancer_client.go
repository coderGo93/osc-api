// Code generated by go-swagger; DO NOT EDIT.

package load_balancer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new load balancer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for load balancer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateLoadBalancer create load balancer API
*/
func (a *Client) CreateLoadBalancer(params *CreateLoadBalancerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateLoadBalancerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLoadBalancerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateLoadBalancer",
		Method:             "POST",
		PathPattern:        "/CreateLoadBalancer",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateLoadBalancerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLoadBalancerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateLoadBalancer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLoadBalancer delete load balancer API
*/
func (a *Client) DeleteLoadBalancer(params *DeleteLoadBalancerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLoadBalancerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLoadBalancerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLoadBalancer",
		Method:             "POST",
		PathPattern:        "/DeleteLoadBalancer",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLoadBalancerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLoadBalancerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLoadBalancer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeregisterVmsInLoadBalancer deregister vms in load balancer API
*/
func (a *Client) DeregisterVmsInLoadBalancer(params *DeregisterVmsInLoadBalancerParams, authInfo runtime.ClientAuthInfoWriter) (*DeregisterVmsInLoadBalancerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeregisterVmsInLoadBalancerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeregisterVmsInLoadBalancer",
		Method:             "POST",
		PathPattern:        "/DeregisterVmsInLoadBalancer",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeregisterVmsInLoadBalancerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeregisterVmsInLoadBalancerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeregisterVmsInLoadBalancer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadLoadBalancers read load balancers API
*/
func (a *Client) ReadLoadBalancers(params *ReadLoadBalancersParams, authInfo runtime.ClientAuthInfoWriter) (*ReadLoadBalancersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadLoadBalancersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadLoadBalancers",
		Method:             "POST",
		PathPattern:        "/ReadLoadBalancers",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadLoadBalancersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadLoadBalancersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadLoadBalancers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RegisterVmsInLoadBalancer register vms in load balancer API
*/
func (a *Client) RegisterVmsInLoadBalancer(params *RegisterVmsInLoadBalancerParams, authInfo runtime.ClientAuthInfoWriter) (*RegisterVmsInLoadBalancerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterVmsInLoadBalancerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RegisterVmsInLoadBalancer",
		Method:             "POST",
		PathPattern:        "/RegisterVmsInLoadBalancer",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterVmsInLoadBalancerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterVmsInLoadBalancerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RegisterVmsInLoadBalancer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateLoadBalancer update load balancer API
*/
func (a *Client) UpdateLoadBalancer(params *UpdateLoadBalancerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLoadBalancerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLoadBalancerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateLoadBalancer",
		Method:             "POST",
		PathPattern:        "/UpdateLoadBalancer",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLoadBalancerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLoadBalancerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateLoadBalancer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
