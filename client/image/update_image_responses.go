// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// UpdateImageReader is a Reader for the UpdateImage structure.
type UpdateImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateImageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateImageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateImageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateImageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateImageOK creates a UpdateImageOK with default headers values
func NewUpdateImageOK() *UpdateImageOK {
	return &UpdateImageOK{}
}

/*UpdateImageOK handles this case with default header values.

The HTTP 200 response (OK).
*/
type UpdateImageOK struct {
}

func (o *UpdateImageOK) Error() string {
	return fmt.Sprintf("[POST /UpdateImage][%d] updateImageOK ", 200)
}

func (o *UpdateImageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateImageBadRequest creates a UpdateImageBadRequest with default headers values
func NewUpdateImageBadRequest() *UpdateImageBadRequest {
	return &UpdateImageBadRequest{}
}

/*UpdateImageBadRequest handles this case with default header values.

The HTTP 400 response (Bad Request).
*/
type UpdateImageBadRequest struct {
}

func (o *UpdateImageBadRequest) Error() string {
	return fmt.Sprintf("[POST /UpdateImage][%d] updateImageBadRequest ", 400)
}

func (o *UpdateImageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateImageUnauthorized creates a UpdateImageUnauthorized with default headers values
func NewUpdateImageUnauthorized() *UpdateImageUnauthorized {
	return &UpdateImageUnauthorized{}
}

/*UpdateImageUnauthorized handles this case with default header values.

The HTTP 401 response (Unauthorized).
*/
type UpdateImageUnauthorized struct {
}

func (o *UpdateImageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /UpdateImage][%d] updateImageUnauthorized ", 401)
}

func (o *UpdateImageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateImageInternalServerError creates a UpdateImageInternalServerError with default headers values
func NewUpdateImageInternalServerError() *UpdateImageInternalServerError {
	return &UpdateImageInternalServerError{}
}

/*UpdateImageInternalServerError handles this case with default header values.

The HTTP 500 response (Internal Server Error).
*/
type UpdateImageInternalServerError struct {
}

func (o *UpdateImageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /UpdateImage][%d] updateImageInternalServerError ", 500)
}

func (o *UpdateImageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
