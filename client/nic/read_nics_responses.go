// Code generated by go-swagger; DO NOT EDIT.

package nic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ReadNicsReader is a Reader for the ReadNics structure.
type ReadNicsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadNicsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadNicsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadNicsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadNicsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadNicsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadNicsOK creates a ReadNicsOK with default headers values
func NewReadNicsOK() *ReadNicsOK {
	return &ReadNicsOK{}
}

/*ReadNicsOK handles this case with default header values.

The HTTP 200 response (OK).
*/
type ReadNicsOK struct {
}

func (o *ReadNicsOK) Error() string {
	return fmt.Sprintf("[POST /ReadNics][%d] readNicsOK ", 200)
}

func (o *ReadNicsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadNicsBadRequest creates a ReadNicsBadRequest with default headers values
func NewReadNicsBadRequest() *ReadNicsBadRequest {
	return &ReadNicsBadRequest{}
}

/*ReadNicsBadRequest handles this case with default header values.

The HTTP 400 response (Bad Request).
*/
type ReadNicsBadRequest struct {
}

func (o *ReadNicsBadRequest) Error() string {
	return fmt.Sprintf("[POST /ReadNics][%d] readNicsBadRequest ", 400)
}

func (o *ReadNicsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadNicsUnauthorized creates a ReadNicsUnauthorized with default headers values
func NewReadNicsUnauthorized() *ReadNicsUnauthorized {
	return &ReadNicsUnauthorized{}
}

/*ReadNicsUnauthorized handles this case with default header values.

The HTTP 401 response (Unauthorized).
*/
type ReadNicsUnauthorized struct {
}

func (o *ReadNicsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ReadNics][%d] readNicsUnauthorized ", 401)
}

func (o *ReadNicsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadNicsInternalServerError creates a ReadNicsInternalServerError with default headers values
func NewReadNicsInternalServerError() *ReadNicsInternalServerError {
	return &ReadNicsInternalServerError{}
}

/*ReadNicsInternalServerError handles this case with default header values.

The HTTP 500 response (Internal Server Error).
*/
type ReadNicsInternalServerError struct {
}

func (o *ReadNicsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /ReadNics][%d] readNicsInternalServerError ", 500)
}

func (o *ReadNicsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
