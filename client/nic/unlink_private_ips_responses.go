// Code generated by go-swagger; DO NOT EDIT.

package nic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// UnlinkPrivateIpsReader is a Reader for the UnlinkPrivateIps structure.
type UnlinkPrivateIpsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UnlinkPrivateIpsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUnlinkPrivateIpsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUnlinkPrivateIpsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUnlinkPrivateIpsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUnlinkPrivateIpsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUnlinkPrivateIpsOK creates a UnlinkPrivateIpsOK with default headers values
func NewUnlinkPrivateIpsOK() *UnlinkPrivateIpsOK {
	return &UnlinkPrivateIpsOK{}
}

/*UnlinkPrivateIpsOK handles this case with default header values.

The HTTP 200 response (OK).
*/
type UnlinkPrivateIpsOK struct {
}

func (o *UnlinkPrivateIpsOK) Error() string {
	return fmt.Sprintf("[POST /UnlinkPrivateIps][%d] unlinkPrivateIpsOK ", 200)
}

func (o *UnlinkPrivateIpsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUnlinkPrivateIpsBadRequest creates a UnlinkPrivateIpsBadRequest with default headers values
func NewUnlinkPrivateIpsBadRequest() *UnlinkPrivateIpsBadRequest {
	return &UnlinkPrivateIpsBadRequest{}
}

/*UnlinkPrivateIpsBadRequest handles this case with default header values.

The HTTP 400 response (Bad Request).
*/
type UnlinkPrivateIpsBadRequest struct {
}

func (o *UnlinkPrivateIpsBadRequest) Error() string {
	return fmt.Sprintf("[POST /UnlinkPrivateIps][%d] unlinkPrivateIpsBadRequest ", 400)
}

func (o *UnlinkPrivateIpsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUnlinkPrivateIpsUnauthorized creates a UnlinkPrivateIpsUnauthorized with default headers values
func NewUnlinkPrivateIpsUnauthorized() *UnlinkPrivateIpsUnauthorized {
	return &UnlinkPrivateIpsUnauthorized{}
}

/*UnlinkPrivateIpsUnauthorized handles this case with default header values.

The HTTP 401 response (Unauthorized).
*/
type UnlinkPrivateIpsUnauthorized struct {
}

func (o *UnlinkPrivateIpsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /UnlinkPrivateIps][%d] unlinkPrivateIpsUnauthorized ", 401)
}

func (o *UnlinkPrivateIpsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUnlinkPrivateIpsInternalServerError creates a UnlinkPrivateIpsInternalServerError with default headers values
func NewUnlinkPrivateIpsInternalServerError() *UnlinkPrivateIpsInternalServerError {
	return &UnlinkPrivateIpsInternalServerError{}
}

/*UnlinkPrivateIpsInternalServerError handles this case with default header values.

The HTTP 500 response (Internal Server Error).
*/
type UnlinkPrivateIpsInternalServerError struct {
}

func (o *UnlinkPrivateIpsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /UnlinkPrivateIps][%d] unlinkPrivateIpsInternalServerError ", 500)
}

func (o *UnlinkPrivateIpsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
