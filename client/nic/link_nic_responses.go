// Code generated by go-swagger; DO NOT EDIT.

package nic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// LinkNicReader is a Reader for the LinkNic structure.
type LinkNicReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LinkNicReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLinkNicOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLinkNicBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewLinkNicUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLinkNicInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewLinkNicOK creates a LinkNicOK with default headers values
func NewLinkNicOK() *LinkNicOK {
	return &LinkNicOK{}
}

/*LinkNicOK handles this case with default header values.

The HTTP 200 response (OK).
*/
type LinkNicOK struct {
}

func (o *LinkNicOK) Error() string {
	return fmt.Sprintf("[POST /LinkNic][%d] linkNicOK ", 200)
}

func (o *LinkNicOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinkNicBadRequest creates a LinkNicBadRequest with default headers values
func NewLinkNicBadRequest() *LinkNicBadRequest {
	return &LinkNicBadRequest{}
}

/*LinkNicBadRequest handles this case with default header values.

The HTTP 400 response (Bad Request).
*/
type LinkNicBadRequest struct {
}

func (o *LinkNicBadRequest) Error() string {
	return fmt.Sprintf("[POST /LinkNic][%d] linkNicBadRequest ", 400)
}

func (o *LinkNicBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinkNicUnauthorized creates a LinkNicUnauthorized with default headers values
func NewLinkNicUnauthorized() *LinkNicUnauthorized {
	return &LinkNicUnauthorized{}
}

/*LinkNicUnauthorized handles this case with default header values.

The HTTP 401 response (Unauthorized).
*/
type LinkNicUnauthorized struct {
}

func (o *LinkNicUnauthorized) Error() string {
	return fmt.Sprintf("[POST /LinkNic][%d] linkNicUnauthorized ", 401)
}

func (o *LinkNicUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinkNicInternalServerError creates a LinkNicInternalServerError with default headers values
func NewLinkNicInternalServerError() *LinkNicInternalServerError {
	return &LinkNicInternalServerError{}
}

/*LinkNicInternalServerError handles this case with default header values.

The HTTP 500 response (Internal Server Error).
*/
type LinkNicInternalServerError struct {
}

func (o *LinkNicInternalServerError) Error() string {
	return fmt.Sprintf("[POST /LinkNic][%d] linkNicInternalServerError ", 500)
}

func (o *LinkNicInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
