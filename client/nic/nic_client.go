// Code generated by go-swagger; DO NOT EDIT.

package nic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new nic API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nic API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateNic create nic API
*/
func (a *Client) CreateNic(params *CreateNicParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateNic",
		Method:             "POST",
		PathPattern:        "/CreateNic",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateNic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteNic delete nic API
*/
func (a *Client) DeleteNic(params *DeleteNicParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteNic",
		Method:             "POST",
		PathPattern:        "/DeleteNic",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteNic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkNic link nic API
*/
func (a *Client) LinkNic(params *LinkNicParams, authInfo runtime.ClientAuthInfoWriter) (*LinkNicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkNicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LinkNic",
		Method:             "POST",
		PathPattern:        "/LinkNic",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkNicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkNicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LinkNic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkPrivateIps link private ips API
*/
func (a *Client) LinkPrivateIps(params *LinkPrivateIpsParams, authInfo runtime.ClientAuthInfoWriter) (*LinkPrivateIpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkPrivateIpsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LinkPrivateIps",
		Method:             "POST",
		PathPattern:        "/LinkPrivateIps",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkPrivateIpsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkPrivateIpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LinkPrivateIps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadNics read nics API
*/
func (a *Client) ReadNics(params *ReadNicsParams, authInfo runtime.ClientAuthInfoWriter) (*ReadNicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadNics",
		Method:             "POST",
		PathPattern:        "/ReadNics",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadNicsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadNicsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadNics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnlinkNic unlink nic API
*/
func (a *Client) UnlinkNic(params *UnlinkNicParams, authInfo runtime.ClientAuthInfoWriter) (*UnlinkNicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlinkNicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UnlinkNic",
		Method:             "POST",
		PathPattern:        "/UnlinkNic",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnlinkNicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnlinkNicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UnlinkNic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnlinkPrivateIps unlink private ips API
*/
func (a *Client) UnlinkPrivateIps(params *UnlinkPrivateIpsParams, authInfo runtime.ClientAuthInfoWriter) (*UnlinkPrivateIpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlinkPrivateIpsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UnlinkPrivateIps",
		Method:             "POST",
		PathPattern:        "/UnlinkPrivateIps",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnlinkPrivateIpsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnlinkPrivateIpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UnlinkPrivateIps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNic update nic API
*/
func (a *Client) UpdateNic(params *UpdateNicParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateNic",
		Method:             "POST",
		PathPattern:        "/UpdateNic",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateNic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
