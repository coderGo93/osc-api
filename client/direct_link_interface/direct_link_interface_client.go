// Code generated by go-swagger; DO NOT EDIT.

package direct_link_interface

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new direct link interface API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for direct link interface API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateDirectLinkInterface create direct link interface API
*/
func (a *Client) CreateDirectLinkInterface(params *CreateDirectLinkInterfaceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDirectLinkInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDirectLinkInterfaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateDirectLinkInterface",
		Method:             "POST",
		PathPattern:        "/CreateDirectLinkInterface",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDirectLinkInterfaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDirectLinkInterfaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDirectLinkInterface: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDirectLinkInterface delete direct link interface API
*/
func (a *Client) DeleteDirectLinkInterface(params *DeleteDirectLinkInterfaceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDirectLinkInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDirectLinkInterfaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDirectLinkInterface",
		Method:             "POST",
		PathPattern:        "/DeleteDirectLinkInterface",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDirectLinkInterfaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDirectLinkInterfaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDirectLinkInterface: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadDirectLinkInterfaces read direct link interfaces API
*/
func (a *Client) ReadDirectLinkInterfaces(params *ReadDirectLinkInterfacesParams, authInfo runtime.ClientAuthInfoWriter) (*ReadDirectLinkInterfacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDirectLinkInterfacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadDirectLinkInterfaces",
		Method:             "POST",
		PathPattern:        "/ReadDirectLinkInterfaces",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadDirectLinkInterfacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDirectLinkInterfacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadDirectLinkInterfaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
