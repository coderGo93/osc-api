// Code generated by go-swagger; DO NOT EDIT.

package vpn_connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new vpn connection API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vpn connection API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateVpnConnection create vpn connection API
*/
func (a *Client) CreateVpnConnection(params *CreateVpnConnectionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVpnConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVpnConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateVpnConnection",
		Method:             "POST",
		PathPattern:        "/CreateVpnConnection",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVpnConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVpnConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVpnConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateVpnConnectionRoute create vpn connection route API
*/
func (a *Client) CreateVpnConnectionRoute(params *CreateVpnConnectionRouteParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVpnConnectionRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVpnConnectionRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateVpnConnectionRoute",
		Method:             "POST",
		PathPattern:        "/CreateVpnConnectionRoute",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVpnConnectionRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVpnConnectionRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVpnConnectionRoute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteVpnConnection delete vpn connection API
*/
func (a *Client) DeleteVpnConnection(params *DeleteVpnConnectionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVpnConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVpnConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVpnConnection",
		Method:             "POST",
		PathPattern:        "/DeleteVpnConnection",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVpnConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVpnConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVpnConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteVpnConnectionRoute delete vpn connection route API
*/
func (a *Client) DeleteVpnConnectionRoute(params *DeleteVpnConnectionRouteParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVpnConnectionRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVpnConnectionRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVpnConnectionRoute",
		Method:             "POST",
		PathPattern:        "/DeleteVpnConnectionRoute",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVpnConnectionRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVpnConnectionRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVpnConnectionRoute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadVpnConnections read vpn connections API
*/
func (a *Client) ReadVpnConnections(params *ReadVpnConnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*ReadVpnConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadVpnConnectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadVpnConnections",
		Method:             "POST",
		PathPattern:        "/ReadVpnConnections",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadVpnConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadVpnConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadVpnConnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
